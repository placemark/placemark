datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

enum LengthUnit {
  centimeters
  degrees
  feet
  inches
  kilometers
  meters
  miles
  millimeters
  nauticalmiles
  radians
  yards
}

enum AreaUnit {
  acres
  centimeters
  feet
  hectares
  inches
  kilometers
  meters
  miles
  millimeters
  yards
}

enum GlobalRole {
  /// Basically this has one purpose: separating staff (SUPERADMIN)
  /// from everyone else, to gate access to the `_admin` page and
  /// its apis
  SUPERADMIN
  CUSTOMER
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

enum DefaultLayer {
  MONOCHROME
  DARK
  SATELLITE
  STREETS
}

enum TokenType {
  RESET_PASSWORD
}

enum CoordinateOrder {
  LONLAT
  LATLON
}

enum WrappedFeatureCollectionAccess {
  PRIVATE
  PUBLIC
}

enum MapboxLayerType {
  MAPBOX
  XYZ
  TILEJSON
}

enum MembershipStatus {
  ACTIVE
  PAUSED
}

model Organization {
  id                 Int                 @id @default(autoincrement())
  name               String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// If this organization logs in with WorkOS, then they’ll have a workOsId
  /// which refers to their organization in WorkOS.
  workOsId String? @unique

  /// This is no longer really used - layers belond to maps
  /// and layer configurations, not organizations. Here just
  /// for legacy.
  mapboxLayers                   MapboxLayer[]
  membership                     Membership[]
  wrappedFeatureCollections      WrappedFeatureCollection[]
  WrappedFeatureCollectionFolder WrappedFeatureCollectionFolder[]
}

/// Memberships can exist without users, in which
/// case they're the same as invitations. An invitation
/// has an invitationToken.
model Membership {
  id   Int            @id @default(autoincrement())
  role MembershipRole

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// This is here to allow certain organizations (initially WP)
  /// to "pause" their accounts and not get billed for inactive users.
  membershipStatus MembershipStatus @default(ACTIVE)

  /// When the user joins, we will clear out the name and email and set the user.
  invitedName     String?
  invitedEmail    String?
  invitationToken String? @unique

  @@unique([organizationId, invitedEmail])
  @@unique([organizationId, userId])
}

model LayerConfig {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  at         String
  visibility Boolean @default(true)
  opacity    Float   @default(1)
  version    Int
  deleted    Boolean @default(false)
  name       String  @default("Untitled")

  wrappedFeatureCollectionId String
  wrappedFeatureCollection   WrappedFeatureCollection @relation(fields: [wrappedFeatureCollectionId], references: [id], onDelete: Cascade)

  /// For XYZ layers, this is the template URL.
  /// For Mapbox layers, this is the mapbox:// URL
  /// For TileJSON layers, this is the JSON endpoint.
  url   String
  token String          @default("")
  type  MapboxLayerType @default(MAPBOX)
  tms   Boolean         @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(fields: [wrappedFeatureCollectionId])
  @@index(fields: [version])
  @@index(fields: [deleted])
}

model WrappedFeatureCollection {
  id              String                         @id
  wrappedFeatures WrappedFeature[]
  organization    Organization                   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  Int
  createdAt       DateTime                       @default(now())
  updatedAt       DateTime                       @updatedAt
  createdById     Int?
  createdBy       User?                          @relation(fields: [createdById], references: [id])
  name            String                         @default("Untitled")
  description     String                         @default("")
  symbolization   Json?
  label           String?
  layerId         Int?
  layer           MapboxLayer?                   @relation(fields: [layerId], references: [id])
  defaultLayer    DefaultLayer?
  presences       Presence[]
  folders         Folder[]
  layerConfigs    LayerConfig[]
  access          WrappedFeatureCollectionAccess @default(PRIVATE)

  gistId                           String?
  wrappedFeatureCollectionFolder   WrappedFeatureCollectionFolder? @relation(fields: [wrappedFeatureCollectionFolderId], references: [id], onDelete: Cascade)
  wrappedFeatureCollectionFolderId String?                         @db.Uuid

  @@index(fields: [organizationId])
  @@index(fields: [wrappedFeatureCollectionFolderId])
}

///  A folder used to organize WrappedFeatureCollections
model WrappedFeatureCollectionFolder {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  at   String @default("a0")
  name String @default("New folder")

  wrappedFeatureCollections WrappedFeatureCollection[]

  createdById Int?
  createdBy   User? @relation(fields: [createdById], references: [id])

  folderId     String?                          @db.Uuid
  folder       WrappedFeatureCollectionFolder?  @relation("FolderParent", fields: [folderId], references: [id], onDelete: Cascade)
  childFolders WrappedFeatureCollectionFolder[] @relation("FolderParent")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(fields: [organizationId])
  @@index(fields: [folderId])
}

/// Sort of like a layer. A sub-category under WrappedFeatureCollection
model Folder {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  at String @default("a0")

  name String @default("New folder")

  wrappedFeatureCollectionId String
  wrappedFeatureCollection   WrappedFeatureCollection @relation(fields: [wrappedFeatureCollectionId], references: [id], onDelete: Cascade)

  wrappedFeatures WrappedFeature[]
  version         Int
  visibility      Boolean          @default(true)
  locked          Boolean          @default(false)
  deleted         Boolean          @default(false)
  expanded        Boolean          @default(true)

  createdById Int?
  createdBy   User? @relation(fields: [createdById], references: [id])

  folderId     String?  @db.Uuid
  folder       Folder?  @relation("FolderParent", fields: [folderId], references: [id], onDelete: SetNull)
  childFolders Folder[] @relation("FolderParent")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(fields: [version])
  @@index(fields: [deleted])
  @@index(fields: [wrappedFeatureCollectionId])
}

/// A wrapper around a pristine GeoJSON feature
/// in the feature column. The wrapper contains
/// the feature's identifier, parent wfc, and any
/// other information.
model WrappedFeature {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  /// Pristine GeoJSON Feature
  feature Json
  version Int

  /// Fractional index
  at      String
  deleted Boolean @default(false)

  /// Membership
  wrappedFeatureCollectionId String
  wrappedFeatureCollection   WrappedFeatureCollection @relation(fields: [wrappedFeatureCollectionId], references: [id], onDelete: Cascade)

  /// Folder
  /// TODO: should this be optional?
  /// Pros:
  /// - easier migration.
  /// - no folders for people who don’t need them.
  /// - matches KML sematics
  /// Cons:
  /// - less uniformity.
  /// - complexity in the export flow.
  folderId String? @db.Uuid
  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)

  /// These are updated automatically every time that this
  /// is updated by Prisma. But it's important to manually
  /// update them if using via node-pg.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// This is not used yet, but down the line
  /// it may be useful to know who created a feature, and we
  /// can do it, so why not.
  createdById Int?
  createdBy   User? @relation(fields: [createdById], references: [id])

  @@index(fields: [version])
  @@index(fields: [deleted])
  @@index(fields: [wrappedFeatureCollectionId])
  @@index(fields: [at])
}

enum WalkthroughState {
  V1_00_CREATEMAP
  V1_01_MENU
  V1_02_MODES
  V1_03_SEARCH
  V1_03a_VISUAL
  V1_04_SHARE
  V1_05_DONE
}

model User {
  id                             Int             @id @default(autoincrement())
  createdAt                      DateTime        @default(now())
  updatedAt                      DateTime        @updatedAt
  name                           String?
  email                          String          @unique
  hashedPassword                 String?
  darkMode                       Boolean         @default(false)
  role                           GlobalRole      @default(CUSTOMER)
  coordinateOrder                CoordinateOrder @default(LONLAT)
  lengthUnits                    LengthUnit      @default(meters)
  areaUnits                      AreaUnit        @default(meters)
  onboardDocumentationHighlights Boolean         @default(false)

  /// For users who log in WorkOS, they don’t have
  /// saved passwords - they have a user in SAML. This
  /// identifier matches an ID on WorkOS's side.
  workOsId String? @unique

  /// This token just allows users to save maps to GitHub Gist.
  githubToken String?

  /// Tracks how many steps of the walkthrough the given user
  /// has gotten through. The values of this enum are used in the application
  /// with a state machine.
  walkthroughState WalkthroughState @default(V1_00_CREATEMAP)

  wrappedFeatureCollections       WrappedFeatureCollection[]
  folders                         Folder[]
  tokens                          Token[]
  sessions                        Session[]
  replicacheClients               ReplicacheClient[]
  memberships                     Membership[]
  WrappedFeature                  WrappedFeature[]
  MapboxLayer                     MapboxLayer[]
  WrappedFeatureCollectionFolders WrappedFeatureCollectionFolder[]
}

// A user can have multiple replicache clients, because they can
// have more than one browser window or tab open.
model ReplicacheClient {
  id             String @id
  lastMutationId Int
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int

  presence Presence?

  // cursor Cursor?

  /// This table may need to be cleaned up because
  /// clients are added but not deleted.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Presence {
  minx                       Float
  miny                       Float
  maxx                       Float
  maxy                       Float
  pitch                      Float                    @default(0)
  bearing                    Float                    @default(0)
  cursorLongitude            Float
  cursorLatitude             Float
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  version                    Int
  deleted                    Boolean                  @default(false)
  wrappedFeatureCollectionId String
  wrappedFeatureCollection   WrappedFeatureCollection @relation(fields: [wrappedFeatureCollectionId], references: [id], onDelete: Cascade)

  replicacheClientId String           @unique
  replicacheClient   ReplicacheClient @relation(fields: [replicacheClientId], references: [id], onDelete: Cascade)

  @@index(fields: [version])
  @@index(fields: [updatedAt])
  @@index(fields: [wrappedFeatureCollectionId])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

model ReplicacheVersionSingleton {
  /// Weird and very necessary, this is how Replicache maintains a 
  /// vector clock of everyone's edits. Unfortunately, this currently
  /// means a global lock. In the long term, this should be per-WFC
  id      Int @id
  version Int
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([hashedToken, type])
}

model MapboxLayer {
  id                        Int                        @id @default(autoincrement())
  type                      MapboxLayerType            @default(MAPBOX)
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  url                       String
  name                      String                     @default("")
  organization              Organization               @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  wrappedFeatureCollections WrappedFeatureCollection[]
  token                     String                     @default("")
  account                   String?
  organizationId            Int
  createdById               Int?
  createdBy                 User?                      @relation(fields: [createdById], references: [id])
}
